---
const { tags, allCount } = Astro.props as {
  tags: Array<{ label: string; normalized: string; count: number }>;
  allCount: number;
};
const sortedTags = [{ label: 'All', normalized: 'all', count: allCount }, ...tags];
---
<div data-tag-sidebar class="contents">
  <aside class="sticky top-32 hidden h-fit w-64 shrink-0 space-y-4 rounded-2xl border border-white/5 bg-soft/60 p-5 shadow-soft md:block">
    <div class="flex items-center justify-between">
      <h2 class="text-sm font-semibold uppercase tracking-wide text-gray-300">Tags</h2>
      <span class="rounded-full bg-white/5 px-2 py-0.5 text-xs text-gray-400">{sortedTags.length - 1}</span>
    </div>
    <div class="flex flex-wrap gap-2">
      {sortedTags.map((tag) => (
        <button
          type="button"
          data-filter-tag={tag.normalized}
          data-filter-label={tag.label}
          aria-pressed="false"
          class="tag-filter inline-flex items-center gap-2 rounded-full border border-transparent bg-white/5 px-3 py-1 text-xs font-medium text-gray-200 transition hover:border-accent/60 hover:text-accent/90 aria-pressed:true:border-accent/60 aria-pressed:true:bg-accent/20 aria-pressed:true:text-accent"
        >
          <span>{tag.label}</span>
          <span class="rounded-full bg-white/5 px-1.5 text-[10px] text-gray-400">{tag.count}</span>
        </button>
      ))}
    </div>
  </aside>
  <div class="md:hidden">
    <button
      type="button"
      data-tag-toggle
      aria-expanded="false"
      class="mb-4 inline-flex items-center gap-2 rounded-full border border-white/10 bg-white/5 px-4 py-2 text-sm text-gray-200 shadow-soft transition hover:border-accent/60 hover:text-accent"
    >
      <span>Tags</span>
      <svg class="h-4 w-4" viewBox="0 0 20 20" fill="none" stroke="currentColor">
        <path d="M5 8l5 5 5-5" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round" />
      </svg>
    </button>
    <div
      data-tag-menu
      class="hidden flex w-full flex-wrap gap-2 rounded-2xl border border-white/5 bg-soft/90 p-4 shadow-soft md:w-auto md:max-h-none md:overflow-visible max-h-56 overflow-y-auto"
    >
      {sortedTags.map((tag) => (
        <button
          type="button"
          data-filter-tag={tag.normalized}
          data-filter-label={tag.label}
          aria-pressed="false"
          class="tag-filter inline-flex items-center gap-2 rounded-full border border-transparent bg-white/5 px-3 py-1 text-xs font-medium text-gray-200 transition hover-border-accent/60 hover:text-accent/90 aria-pressed:true:border-accent/60 aria-pressed:true:bg-accent/20 aria-pressed:true:text-accent"
        >
          <span>{tag.label}</span>
          <span class="rounded-full bg-white/5 px-1.5 text-[10px] text-gray-400">{tag.count}</span>
        </button>
      ))}
    </div>
  </div>
  <script is:inline>
    const root = document.currentScript?.closest('[data-tag-sidebar]');
    const toggle = root?.querySelector('[data-tag-toggle]');
    const menu = root?.querySelector('[data-tag-menu]');

    if (!toggle || !menu) {
      document.currentScript?.remove();
      return;
    }

    const setOpenState = (isOpen) => {
      toggle.setAttribute('aria-expanded', isOpen ? 'true' : 'false');
      menu.classList.toggle('hidden', !isOpen);
    };

    toggle.addEventListener('click', () => {
      const isOpen = toggle.getAttribute('aria-expanded') === 'true';
      setOpenState(!isOpen);
    });

    setOpenState(false);
  </script>
</div>
